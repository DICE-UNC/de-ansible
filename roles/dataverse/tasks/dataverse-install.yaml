---

- name: clone {{ dataverse_version }} from git. optimally replace install.zip with this.
  git: repo=git://github.com/IQSS/dataverse.git dest=/tmp/dataverse_{{ dataverse_version }} version={{ dataverse_version }}
       clone=yes depth=1 accept_hostkey=true
  tags: dataverse

- name: download dataverse installer. unarchive urls supported in ansible 2.0
  get_url: url=https://github.com/IQSS/dataverse/releases/download/v{{ dataverse_version }}/dvinstall-{{ dataverse_version }}.zip dest=/tmp mode=0644
  tags: dataverse

- name: unzip dataverse installer
  shell: unzip /tmp/dvinstall-{{ dataverse_version }}.zip -d /tmp
  tags: dataverse

- name: install jdbc driver
  shell: "/bin/cp /tmp/dvinstall/pgdriver/postgresql-9.1-902.jdbc4.jar {{ dataverse_gf_root }}/glassfish/lib/"
  tags: dataverse

- name: copy jhove config
  copy: src=jhove.conf dest={{ dataverse_gf_root }}/domains/glassfish/{{ dataverse_gf_domain }}/config/ owner=root group=root mode=0644
  tags: dataverse

- name: run glassfish-setup.sh
  shell: "cd /tmp/dvinstall && nohup ./glassfish-setup.sh > /tmp/glassfish-setup.out 2>&1"
  become: yes
  become_user: "{{ dataverse_gf_user }}"
  environment:
    HOST_ADDRESS: "{{ dataverse_host_address }}"
    GLASSFISH_ROOT: "{{ dataverse_gf_root }}"
    GLASSFISH_DOMAIN: "{{ dataverse_gf_domain }}"
    FILES_DIR: "{{ dataverse_filesdir }}"
    DB_NAME: "{{ dataverse_db }}"
    DB_PORT: "{{ dataverse_dbport }}"
    DB_HOST: "{{ dataverse_dbhost }}"
    DB_USER: "{{ dataverse_dbuser }}"
    DB_PASS: "{{ dataverse_dbpass }}"
    RSERVE_HOST: "{{ rserve_host }}"
    RSERVE_PORT: "{{ rserve_port }}"
    RSERVE_USER: "{{ rserve_user }}"
    RSERVE_PASS: "{{ rserve_pass }}"
    SMTP_SERVER: "{{ dataserve_smtp }}"
    MEM_HEAP_SIZE: "{{ dataverse_memheap }}"
  tags: dataverse

- name: deploy dataverse.war
  become: yes
  become_user: "{{ dataverse_gf_user }}"
  shell: "nohup {{ dataverse_gf_root }}/bin/asadmin deploy /tmp/dvinstall/dataverse.war"
  tags: dataverse

- name: restart glassfish post-deployment
  shell: "nohup {{ dataverse_gf_root }}/bin/asadmin restart-domain {{ dataverse_gf_domain }}"
  tags: dataverse

# my 2-core VM completes in ~30 seconds, allowing 60
- name: give glassfish 60 seconds to wake up
  pause: seconds=60
  tags: dataverse

- name: setup-all.sh kitchen sink configuration.
  shell: "cd /tmp/dataverse_{{ dataverse_version }}/scripts/api && ./setup-all.sh > /tmp/setup-all.out 2>&1"
  tags: dataverse

- name: populate reference data
  shell: "psql -U {{ dataverse_dbuser }} -h {{ dataverse_dbhost }} -d {{ dataverse_db }} -f /tmp/dataverse_{{ dataverse_version }}/scripts/database/reference_data.sql"
  environment:
    PGPASSWORD: "{{ dataverse_dbpass }}"
  tags: dataverse

- name: suppress grizzly ajp warnings
  become: yes
  become_user: "{{ dataverse_gf_user }}"
  shell: "{{ dataverse_gf_root }}/bin/asadmin set-log-levels org.glassfish.grizzly.http.server.util.RequestUtils=SEVERE"
  tags: dataverse

- name: enable Shibboleth in Glassfish
  become: yes
  become_user: "{{ dataverse_gf_user }}"
  shell: "curl -X PUT -d true http://localhost:8080/api/admin/settings/:ShibEnabled"
  tags: dataverse

- name: Fin
  debug: msg="Dataverse installation complete! Please check output logs in /tmp for further review."
  tags: dataverse

########### don't think we want the below for a production installation ###########
#- name: publish root dataverse
#  shell: "cd /tmp/dataverse_{{ dataverse_version }} && ./scripts/search/tests/publish-dataverse-root"
#  tags: dataverse
#
#- name: grant authusers add on root
#  shell: "cd /tmp/dataverse_{{ dataverse_version }} && ./scripts/search/tests/grant-authusers-add-on-root"
#  tags: dataverse
#
#- name: populate users
#  shell: "cd /tmp/dataverse_{{ dataverse_version }} && ./scripts/search/populate-users"
#  tags: dataverse
#
#- name: create-users
#  shell: "cd /tmp/dataverse_{{ dataverse_version }} && ./scripts/search/create-users"
#  tags: dataverse
#
#- name: create all and test
#  shell: "cd /tmp/dataverse_{{ dataverse_version }} && ./scripts/search/tests/create-all-and-test"
#  tags: dataverse
#
#- name: public spruce1 and test (do we want this?)
#  shell: "cd /tmp/dataverse_{{ dataverse_version }} && ./scripts/search/tests/public-spruce1-and-test"
#  tags: dataverse
#
#- name: copy admin password file
#  template: src=adminpass.txt.j2 dest=/tmp/dvinstall/adminpass.txt owner={{ dataverse_gf_user }} group={{ dataverse_gf_group }} mode=0600
#  tags: dataverse
#
#- name: set admin password
#  shell: "{{ dataverse_gf_root }}/bin/asadmin --user {{ dataverse_gf_adminuser }} --passwordfile /tmp/dvinstall/adminpass.txt change-admin-password"
#  tags: dataverse
#
#- name: enable secure admin
#  shell: "{{ dataverse_gf_root }}/bin/asadmin --user {{ dataverse_gf_adminuser }} --passwordfile /tmp/dvinstall/adminpass.txt enable-secure-admin"
#  tags: dataverse
#
#- name: remove admin password hash tmp file
#  file: path=/tmp/dvinstall/adminpass.txt state=absent
#  tags: dataverse
